services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: invitee_bot
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram Bot Application
  app:
    build: .
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database and Redis (already configured for Docker)
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/invitee_bot
      REDIS_URL: redis://default:redis@redis:6379
      
      # App Configuration
      NODE_ENV: development
      PORT: 3000
      JWT_SECRET: inviteebot2024secretkeyforjwttoken
      ENCRYPTION_KEY: inviteebot2024encryptkey32chars1
      
      # Language
      DEFAULT_LANGUAGE: pt
      FALLBACK_LANGUAGE: en
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      DISABLE_RATE_LIMIT: false
      
      # Bot Configuration
      VERIFICATION_TIMEOUT_HOURS: 24
      MAX_VERIFICATION_ATTEMPTS: 3
      LOOM_TUTORIAL_URL: https://www.loom.com/share/your-uid-tutorial
      TEST_MODE: false
      LOG_LEVEL: info
      DISABLE_FILE_LOCK: true
      
      # CONFIGURE ESTAS VARIÁVEIS:
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-your_telegram_bot_token_here}
      TELEGRAM_GROUP_ID: ${TELEGRAM_GROUP_ID:--100XXXXXXXXX}
      TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL:-https://your-domain.easypanel.host/webhook}
      BLOFIN_API_KEY: ${BLOFIN_API_KEY:-your_blofin_api_key}
      BLOFIN_SECRET_KEY: ${BLOFIN_SECRET_KEY:-your_blofin_secret_key}
      BLOFIN_PASSPHRASE: ${BLOFIN_PASSPHRASE:-your_blofin_passphrase}
      BLOFIN_BASE_URL: ${BLOFIN_BASE_URL:-https://openapi.blofin.com}
      YOUR_REFERRAL_CODE: ${YOUR_REFERRAL_CODE:-your_referral_code}
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/alive', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local